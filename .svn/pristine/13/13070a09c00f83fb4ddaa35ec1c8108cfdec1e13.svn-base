/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import dominio.Jugador;
import java.awt.*;
import java.awt.event.*;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Sergio Moyano Diaz
 */
public class VistaTablero extends Vista {

    private int dimension;
    private GestorCasilla g[][];
    private JButton b[][];
    private JHexLayout c;
    private ControladorVistaPartida partida;
    private ControladorVistaJuego juego;
    private boolean partidaAcabada;
    private JLabel labelInfo, labelTurnoActual, labelTimer;
    private JButton buttonCPU;
    private boolean bayuda;
    private int ayudaInt[];
    private java.util.Timer timer;
    private int durTurno;
    private int contSecs;
    private Color colorJ1;
    private Color colorJ2;
    private Color colorBG;
    private boolean predIniciada;
    private Toolbar jt;
    private JPanel panelTablero;
 
    public VistaTablero(Toolbar jt) {
        colorJ1 = new Color(255, 102, 102);
        colorJ2 = new Color(238, 243, 95);
        colorBG = new Color(216, 180, 140);
        this.setBackground(colorBG);
        labelInfo = new JLabel(" ");
        labelInfo.setBackground(colorBG);
        labelInfo.setOpaque(true);
        labelTimer = new JLabel(" ");
        labelTimer.setBackground(colorBG);
        labelTimer.setOpaque(true);
        labelTurnoActual = new JLabel(" ");
        labelTurnoActual.setBackground(colorBG);
        labelTurnoActual.setOpaque(true);
       buttonCPU = new JButton("Iniciar turno");
        this.jt  =jt;
        panelTablero = new JPanel();
        panelTablero.setBackground(colorBG);
    }
    
    public void resetTablero( ){
      panelTablero.removeAll();
      removeAll();        
    } 
    
    public void prepararTablero(int dimension, int ancho, ControladorVistaPartida partida, ControladorVistaJuego juego) {
         buttonCPU = new JButton("Iniciar turno"); //se tiene que hacer para cada nueva partida esto
        this.dimension = dimension;
        this.partida = partida;
        this.juego = juego;
        predIniciada = false;
        bayuda = false;
        //dimension =2;
        c = new JHexLayout(dimension, new Insets(-1, -1, -1, -1));
        Dimension n = new Dimension(ancho, (int) (ancho * 0.5));
        c.setPrefferedSize(n);
        c.setMinimumSize(n);
        labelInfo.setText("");
        labelTimer.setText("");
        labelTurnoActual.setText("");
        
        add(jt, configurarGrid(0, 0));
        add(labelInfo, configurarGrid(0, 4));
        add(labelTimer, configurarGrid(0, 2));
        add(labelTurnoActual, configurarGrid(0, 1));
        add(buttonCPU, configurarGrid(0, 5));
        panelTablero.setLayout(c);
        setfill(GridBagConstraints.BOTH);
        setweigth(1,1);
        add(panelTablero, configurarGrid(0, 3));
        setfill(GridBagConstraints.NONE);
        setweigth(0,0);
        try {
            juego.actualizarLabelTurno(labelTurnoActual);
            if (!partida.getEsPred()) {
                if (partida.getDurContrarreloj() != 0) {
                    timer = new java.util.Timer();
                    durTurno = partida.getDurContrarreloj();
                    if (partida.esHumano(1) || partida.esHumano(2)) {
                        iniciarTimer(labelTimer);
                    }
                } else {
                    durTurno = 0;
                }
            } else {
                if (partida.getDurContrarreloj() != 0) {
                    timer = new java.util.Timer();
                }
                durTurno = 0;
            }
        } catch (Exception e) {
        }
        
        panelTablero.setLayout(c);
        setfill(GridBagConstraints.BOTH);
        setweigth(1,1);
        add(panelTablero, configurarGrid(0, 3));
        setfill(GridBagConstraints.NONE);
        setweigth(0,0); 
       // setanchor(GridBagConstraints.CENTER);
        b = new JButton[dimension][dimension];
        g = new VistaTablero.GestorCasilla[dimension][dimension];
         
        for (int i = 0; i < dimension; i++) {
            for (int j = 0; j < dimension; j++) {
                if (i == 0) {
                    if (j == 0) {
                        b[i][j] = new JHexButton("NW");                       
                    } else if (j == dimension - 1) {
                        b[i][j] = new JHexButton("NE");
                    } else {
                        b[i][j] = new JHexButton("N");
                    }
                } else if (i == dimension - 1) {
                    if (j == 0) {
                        b[i][j] = new JHexButton("SW");
                    } else if (j == dimension - 1) {
                        b[i][j] = new JHexButton("SE");
                    } else {
                        b[i][j] = new JHexButton("S");
                    }
                } else {
                    if (j == 0) {
                        b[i][j] = new JHexButton("W");
                    } else if (j == dimension - 1) {
                        b[i][j] = new JHexButton("E");
                    } else {
                        b[i][j] = new JHexButton();
                    }
                }
                b[i][j].setBackground(Color.WHITE);
                panelTablero.add(b[i][j]);
                g[i][j] = new VistaTablero.GestorCasillaNormal(i, j, (partida.esHumano(1) || partida.esHumano(2)));
                b[i][j].addActionListener(g[i][j]);
            }
        }
        int gan = partida.getGanador();
        if (gan == 0) {
            this.partidaAcabada = false;
        } else {
            this.partidaAcabada = true;
        }
        if (!this.partidaAcabada) {
            if (!partida.esHumano(1) && !partida.esHumano(2)) {
                buttonCPU.addActionListener(new VistaTablero.ButtonNext());
            } else if (partida.getEsPred()) {
                buttonCPU.setText("Comenzar Partida");
                buttonCPU.addActionListener(new VistaTablero.ComenzarPartida());
                if (partida.getApertura() == 1) {
                    threading(juego.getJugadorTurnoActual());
                } else {
                    threading(juego.getJugadorTurnoActual());
                }
            } else {
                buttonCPU.setVisible(false);
                if (partida.getApertura() == 1) {
                    threading(juego.getJugadorTurnoActual());
                } else {
                    threading(juego.getJugadorTurnoActual());
                }
            }
        }
    }

    private class ComenzarPartida implements ActionListener {

        public ComenzarPartida() {
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            predIniciada = true;
            juego.comenzarJuegoPred();
            if (partida.getDurContrarreloj() != 0) {
                timer = new java.util.Timer();
                durTurno = partida.getDurContrarreloj();
                if (partida.esHumano(1) || partida.esHumano(2)) {
                    iniciarTimer(labelTimer);
                }
            } else {
                durTurno = 0;
            }
            if (!partida.esHumano(1) && !partida.esHumano(2)) {
                buttonCPU.setText("Iniciar turno");
                buttonCPU.removeActionListener(this);
                buttonCPU.addActionListener(new VistaTablero.ButtonNext());
            } else {
                buttonCPU.setVisible(false);
                int numjug = juego.getJugadorTurnoActual();
                if (!partida.esHumano(numjug)) {
                    threading(numjug);
                }
            }
        }
    }

    private class ButtonNext implements ActionListener {

        public ButtonNext() {
        }

        @Override
        public void actionPerformed(ActionEvent e) {

            if (!partidaAcabada) {
                if (partida.getDurContrarreloj() != 0) {
                    iniciarTimer(labelTimer);
                }
                threading(juego.getJugadorTurnoActual());
            }
        }
    }
    
    

    abstract class GestorCasilla implements ActionListener {

        protected int Fila;
        protected int Columna;
        protected boolean Permitido;

        public GestorCasilla(int columna, int fila) {
            Columna = columna;
            Fila = fila;
            Permitido = true;
        }

        abstract public void actionPerformed(ActionEvent e);

        public boolean ObtenerPermitido() {
            return Permitido;
        }

        public void SeleccionarPermitido(boolean permitido) {
            Permitido = permitido;
        }
    }

    private class GestorCasillaNormal extends VistaTablero.GestorCasilla {

        public GestorCasillaNormal(int columna, int fila) {
            super(columna, fila);

        }

        public GestorCasillaNormal(int columna, int fila, boolean permitido) {
            super(columna, fila);
            Permitido = permitido;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Runnable miRunnable = new Runnable() {
                public void run() {
                    if (partida.esHumano(juego.getJugadorTurnoActual())) {
                        if (Permitido && !partidaAcabada) {
                            jugar(Columna, Fila);
                            Permitido = false;
                        } else if (partida.getNumTurno() == 1 && partida.getTarta() && (partida.esHumano(1) || partida.esHumano(2))) {
                            jugar(Columna, Fila);
                            labelInfo.setText("Tarta efectuada");
                            Permitido = false;
                        }
                    }
                }
            };
            Thread hilo = new Thread(miRunnable);
            hilo.start();
        }
    }
   
    
    
    
    private void jugar(int Columna, int Fila) {
        if (bayuda) {
            b[ayudaInt[0]][ayudaInt[1]].setBackground(Color.white);
            bayuda = false;
        }
        try {
            realizapackmovimientos(Columna, Fila);
        } catch (Exception w) {
            w.printStackTrace();
        }
        if (partida.getGanador() != 0) {
            try {
                juego.acabarPartida();
                partida.mensajeGanador(labelInfo);
                partidaAcabada = true;
                if (partida.getDurContrarreloj() != 0) {
                    detenerTimer();
                }
                labelTimer.setText("");
            } catch (Exception w) {
                w.printStackTrace();
            }
        }
    }

    public void pedirAyuda() {
        try {
            if (!partidaAcabada) {
                if (bayuda) {
                    b[ayudaInt[0]][ayudaInt[1]].setBackground(Color.WHITE);
                }
                ayudaInt = juego.help();
                b[ayudaInt[0]][ayudaInt[1]].setBackground(Color.GRAY);
                bayuda = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void deshacerJugada(int n) {
        if (partida.getUndo()) {
            try {
                while (n > 0) {
                    int[] pos = partida.getUltimoMov();
                    if (pos != null) {
                        b[pos[0]][pos[1]].setBackground(Color.WHITE);
                        g[pos[0]][pos[1]].SeleccionarPermitido(true);
                        juego.undo(1);
                    }
                    --n;
                }
                if (partidaAcabada) {
                    partidaAcabada = false;
                    labelInfo.setText("");
                }
                if (partida.getDurContrarreloj() != 0) {
                    detenerTimer();
                    iniciarTimer(labelTimer);
                }
                juego.actualizarLabelTurno(labelTurnoActual);
                threading(juego.getJugadorTurnoActual());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Deshacer no está activado");
        }
    }

    public void setTablero(int[][] hola) {
        for (int i = 0; i < dimension; ++i) {
            for (int j = 0; j < dimension; ++j) {
                if (hola[i][j] == 1) {
                    b[i][j].setBackground(colorJ1);
                    g[i][j].SeleccionarPermitido(false);
                } else if (hola[i][j] == 2) {
                    b[i][j].setBackground(colorJ2);
                    g[i][j].SeleccionarPermitido(false);
                } else {
                    b[i][j].setBackground(Color.white);
                }
            }
        }
    }

    /**
     * El temporizador salta cada segundo para comprobar si se ha superado la
     * duración límite del turno, para pasar de turno al hacerlo
     */
    class temporizador extends TimerTask {

        private JLabel tiempo;
        private JLabel turnos;

        private temporizador(JLabel tiempo, JLabel turnos) {
            this.tiempo = tiempo;
            this.turnos = turnos;
            this.tiempo.setFont(new Font("Verdana", Font.BOLD, 32));
        }

        @Override
        public void run() {
            tiempo.setText(Integer.toString(contSecs));
            if (contSecs <= 0) {
                juego.acabarTurnoTimer(juego.getJugadorTurnoActual());
                try {
                    juego.actualizarLabelTurno(turnos);
                } catch (Exception ex) {
                    Logger.getLogger(VistaTablero.class.getName()).log(Level.SEVERE, null, ex);
                }
                detenerTimer();
                if (!partidaAcabada) {
                    iniciarTimer(tiempo);
                }
                if (!partida.esHumano(juego.getJugadorTurnoActual())) {
                    threading(juego.getJugadorTurnoActual());
                }
            } else {
                --contSecs;
            }

        }
    }

    public void detenerTimer() {
        timer.purge();
        timer.cancel();
System.out.println("detengo el timer");

    }

    private void iniciarTimer(JLabel tiempo) {
        if (durTurno != 0) {
            System.out.println("enciendo timer");
            contSecs = durTurno;
            timer = new java.util.Timer();
            timer.scheduleAtFixedRate(new VistaTablero.temporizador(labelTimer, labelTurnoActual), 0, 1000);
        }
    }

    private void threading(int numturno) {
        if (!partida.esHumano(numturno)) {
            Runnable miRunnable = new Runnable() {
                public void run() {
                    try {
                        int njug = juego.getJugadorTurnoActual();
                        juego.realizarMovimientoIA(labelInfo);
                        int o[] = partida.getUltimoMov();
                        if (njug == 1) {
                            b[o[0]][o[1]].setBackground(colorJ1);
                        } else if (njug == 2) {
                            b[o[0]][o[1]].setBackground(colorJ2);
                        }
                        g[o[0]][o[1]].SeleccionarPermitido(false);
                        if (partida.getDurContrarreloj() != 0) {
                            detenerTimer();
                            if (!partida.esHumano(1) && !partida.esHumano(2)) {
                                labelTimer.setText("");
                            }
                        }
                        if (partida.getGanador() == 0) {
                            juego.actualizarLabelTurno(labelTurnoActual);
                            if (partida.getDurContrarreloj() != 0) {
                                if (partida.esHumano(1) || partida.esHumano(2)) {
                                    iniciarTimer(labelTimer);
                                }
                            }
                        } else {
                            juego.acabarPartida();
                            partida.mensajeGanador(labelInfo);
                            partidaAcabada = true;
                            labelTimer.setText("");
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            };
            Thread hilo = new Thread(miRunnable);
            hilo.start();
        }
    }

    private void realizapackmovimientos(int Columna, int Fila) throws Exception {
        if ("Tarta efectuada".equals(labelInfo.getText())) {
            labelInfo.setText("");
        }
        int i = juego.getJugadorTurnoActual();
        int j = 1;
        juego.realizarMovimientoHum(Columna, Fila);
        if (i == 1) {
            j = 2;
            b[Columna][Fila].setBackground(colorJ1);
        }
        if (i == 2) {
            j = 1;
            b[Columna][Fila].setBackground(colorJ2);
        }
        g[Columna][Fila].SeleccionarPermitido(false);
        if (partida.getDurContrarreloj() != 0) {
            detenerTimer();
        }
        if (partida.getGanador() == 0) {
            juego.actualizarLabelTurno(labelTurnoActual);
            if (partida.getDurContrarreloj() != 0) {
                iniciarTimer(labelTimer);
            }
        }
        if (!partida.esHumano(j) && partida.getGanador() == 0) {
            juego.actualizarLabelTurno(labelTurnoActual);
            juego.realizarMovimientoIA(labelInfo);
            if (partida.getDurContrarreloj() != 0) {
                detenerTimer();
            }
            int o[] = partida.getUltimoMov();
            if (j == 1) {
                b[o[0]][o[1]].setBackground(colorJ1);
            }
            if (j == 2) {
                b[o[0]][o[1]].setBackground(colorJ2);
            }
            g[o[0]][o[1]].SeleccionarPermitido(false);
            if (partida.getGanador() == 0) {
                juego.actualizarLabelTurno(labelTurnoActual);
                if (partida.getDurContrarreloj() != 0) {
                    iniciarTimer(labelTimer);
                }
            }
        }
    }

    public boolean getPredIniciada() {
        return predIniciada;
    }
}
